use crate::{
    cli::CliArgs,
    crypto::bn254::{BlsKeypair, BlsSignature, PrivateKey},
};
use ark_ec::AffineRepr;
use ark_ff::PrimeField;
use bindings::shared_types::{G1Point, Task, TaskResponse};
use ethers::abi::AbiEncode;
use num_bigint::Sign;
use reqwest::Response;
use reqwest_middleware::{ClientBuilder, ClientWithMiddleware};
use reqwest_retry::{
    default_on_request_failure, default_on_request_success, policies::ExponentialBackoff,
    RetryTransientMiddleware, Retryable, RetryableStrategy,
};
use serde::{ser::SerializeStruct, Serialize};
use sp_core::Bytes;
use sp_runtime::traits::{Hash, Keccak256};
use tracing::instrument;

type Bytes32 = [u8; 32];

#[derive(Serialize, Debug)]
struct SignedTaskResponse {
    #[serde(rename = "TaskResponseEncoded")]
    task_response_encoded: Bytes,
    // #[serde(rename = "TaskResponse")]
    // task_response: TaskResponseWire,
    #[serde(rename = "BlsSignature")]
    bls_signature: BlsSignatureWire,
    #[serde(rename = "OperatorId")]
    operator_id: Bytes32,
}

// #[derive(Serialize, Debug)]
// struct TaskResponseWire {
//     #[serde(rename = "ReferenceTaskIndex")]
//     pub reference_task_index: u32,
//     #[serde(rename = "QuorumApkUpdateG1X")]
//     pub quorum_apk_update_g1x: G1PointWire2,
//     #[serde(rename = "BlockHash")]
//     pub block_hash: Bytes32,
//     #[serde(rename = "StorageProofHash")]
//     pub storage_proof_hash: Bytes32,
//     #[serde(rename = "PendingStateHash")]
//     pub pending_state_hash: Bytes32,
// }

// #[derive(Serialize, Debug)]
// #[serde(rename_all = "PascalCase")]
// struct TaskWire {
//     pub block_number: ::ethers::core::types::U256,
//     pub task_created_block: u32,
//     pub quorum_numbers: ::ethers::core::types::Bytes,
//     pub quorum_threshold_percentage: u32,
// }

// impl From<Task> for TaskWire {
//     fn from(value: Task) -> Self {
//         Self {
//             block_number: value.block_number,
//             task_created_block: value.task_created_block,
//             quorum_numbers: value.quorum_numbers,
//             quorum_threshold_percentage: value.quorum_threshold_percentage,
//         }
//     }
// }

// impl From<TaskResponse> for TaskResponseWire {
//     fn from(value: TaskResponse) -> Self {
//         Self {
//             reference_task_index: value.reference_task_index,
//             quorum_apk_update: value.quorum_apk_update.into(),
//             block_hash: value.block_hash,
//             storage_proof_hash: value.storage_proof_hash,
//             pending_state_hash: value.pending_state_hash,
//         }
//     }
// }

#[derive(Serialize, Debug)]
struct BlsSignatureWire {
    g1_point: G1PointWire,
}

impl From<BlsSignature> for BlsSignatureWire {
    fn from(value: BlsSignature) -> Self {
        Self {
            g1_point: G1PointWire {
                x: value.x().unwrap().into_bigint(),
                y: value.y().unwrap().into_bigint(),
            },
        }
    }
}

#[derive(Debug)]
struct G1PointWire {
    x: <PrivateKey as PrimeField>::BigInt,
    y: <PrivateKey as PrimeField>::BigInt,
}

// #[derive(Debug)]
// struct G1PointWire2 {
//     pub X: ::ethers::core::types::U256,
//     pub Y: ::ethers::core::types::U256,
// }

// impl From<G1Point> for G1PointWire2 {
//     fn from(value: G1Point) -> Self {
//         Self {
//             X: value.x,
//             Y: value.y,
//         }
//     }
// }

// impl Serialize for G1PointWire2 {
//     fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
//     where
//         S: serde::Serializer,
//     {
//         let mut s = serializer.serialize_struct("BN254G1Point", 2)?;
//         s.serialize_field("X", &self.X.to_string())?;
//         s.serialize_field("Y", &self.Y.to_string())?;
//         s.end()
//     }
// }

impl Serialize for G1PointWire {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        let mut s = serializer.serialize_struct("g1_point", 2)?;
        s.serialize_field("X", &self.x.to_string())?;
        s.serialize_field("Y", &self.y.to_string())?;
        s.end()
    }
}

#[derive(Debug)]
pub struct Rpc {
    client: ClientWithMiddleware,
    avs_url: String,
}

struct RetryFailed;
impl RetryableStrategy for RetryFailed {
    fn handle(&self, res: &reqwest_middleware::Result<reqwest::Response>) -> Option<Retryable> {
        match res {
            // retry if 404 task not initialized, in case block reexecution is faster the aggr task initialization, usually on local testnet
            Ok(success) if success.status() == 404 => Some(Retryable::Transient),
            Ok(success) => default_on_request_success(success),
            Err(error) => default_on_request_failure(error),
        }
    }
}

impl Rpc {
    pub fn build(cfg: &CliArgs) -> Self {
        let retry_policy = ExponentialBackoff::builder().build_with_max_retries(3);
        let client = ClientBuilder::new(reqwest::Client::new())
            .with(RetryTransientMiddleware::new_with_policy_and_strategy(
                retry_policy,
                RetryFailed,
            ))
            .build();
        Self {
            client,
            avs_url: cfg.avs_rpc_url.to_owned(),
        }
    }

    #[instrument(skip(self, keypair))]
    pub async fn send_task_response(
        &self,
        task_response: TaskResponse,
        keypair: &BlsKeypair,
    ) -> eyre::Result<Response> {
        println!("task_response - {:?}", task_response);
        let req = create_response(task_response, keypair)?;
        println!("req - {:?}", req);
        let json: String = serde_json::to_string(&req)?;
        println!("json - {:?}", json);

        Ok(self.client.post(&self.avs_url).body(json).send().await?)
    }
}

fn create_response(task: TaskResponse, keypair: &BlsKeypair) -> eyre::Result<SignedTaskResponse> {
    let encoded = task.clone().encode();
    println!(
        "encoded - {}",
        array_bytes::bytes2hex("0x", encoded.clone())
    );

    let hash = Keccak256::hash(encoded.as_ref());
    let sig = keypair.sign(hash.as_bytes())?;
    println!("hash - {}", array_bytes::bytes2hex("0x", hash.clone()));
    println!("hash - {:?}", hash);
    println!("sig - {:?}", sig);

    Ok(SignedTaskResponse {
        task_response_encoded: task.clone().encode().into(),
        // task_response: task.into(),
        bls_signature: sig.into(),
        operator_id: keypair.operator_id().to_fixed_bytes(),
    })
}

// task_response - TaskResponse { reference_task_index: 6, block_hash: [244, 215, 139, 116, 178, 19, 164, 142, 52, 245, 160, 172, 88, 74, 164, 168, 88, 35, 124, 37, 252, 19, 177, 65, 123, 85, 26, 175, 227, 132, 242, 122], storage_proof_hash: [35, 107, 27, 141, 37, 99, 136, 166, 162, 35, 118, 43, 154, 139, 227, 199, 50, 210, 214, 159, 247, 240, 213, 143, 150, 167, 36, 190, 221, 64, 130, 228], pending_state_hash: [31, 188, 19, 31, 78, 175, 205, 220, 101, 13, 225, 81, 155, 55, 247, 31, 107, 154, 134, 69, 35, 200, 63, 22, 57, 47, 71, 152, 204, 46, 185, 25] }
// avs-finalizer-1  | encoded - 0x0000000000000000000000000000000000000000000000000000000000000006f4d78b74b213a48e34f5a0ac584aa4a858237c25fc13b1417b551aafe384f27a236b1b8d256388a6a223762b9a8be3c732d2d69ff7f0d58f96a724bedd4082e41fbc131f4eafcddc650de1519b37f71f6b9a864523c83f16392f4798cc2eb919
// avs-finalizer-1  | req - SignedTaskResponse { task_response: Bytes([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 244, 215, 139, 116, 178, 19, 164, 142, 52, 245, 160, 172, 88, 74, 164, 168, 88, 35, 124, 37, 252, 19, 177, 65, 123, 85, 26, 175, 227, 132, 242, 122, 35, 107, 27, 141, 37, 99, 136, 166, 162, 35, 118, 43, 154, 139, 227, 199, 50, 210, 214, 159, 247, 240, 213, 143, 150, 167, 36, 190, 221, 64, 130, 228, 31, 188, 19, 31, 78, 175, 205, 220, 101, 13, 225, 81, 155, 55, 247, 31, 107, 154, 134, 69, 35, 200, 63, 22, 57, 47, 71, 152, 204, 46, 185, 25]), bls_signature: BlsSignatureWire { g1_point: G1PointWire { x: BigInt([6414388623002460198, 3935234236590813146, 17272744584949058105, 1448781156749743865]), y: BigInt([318514756468758091, 18182375163070126606, 1342887054825783377, 2130240232483275987]) } }, operator_id: [9, 81, 196, 0, 159, 107, 77, 79, 159, 206, 241, 52, 130, 169, 21, 174, 17, 181, 110, 173, 14, 77, 52, 216, 113, 192, 146, 131, 57, 135, 245, 24] }
// avs-finalizer-1  | json - "{\"TaskResponse\":\"0x0000000000000000000000000000000000000000000000000000000000000006f4d78b74b213a48e34f5a0ac584aa4a858237c25fc13b1417b551aafe384f27a236b1b8d256388a6a223762b9a8be3c732d2d69ff7f0d58f96a724bedd4082e41fbc131f4eafcddc650de1519b37f71f6b9a864523c83f16392f4798cc2eb919\",\"BlsSignature\":{\"g1_point\":{\"X\":\"9094146713229339985997605710714061505236762486261629008303477396915210838054\",\"Y\":\"13371734660111297977188861029117306156381884932095904435622397031304345048651\"}},\"OperatorId\":[9,81,196,0,159,107,77,79,159,206,241,52,130,169,21,174,17,181,110,173,14,77,52,216,113,192,146,131,57,135,245,24]}"

// [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 136 243 234 179 129 49 43 143 172 237 105 52 203 46 12 44 181 223 205 216 183 37 3 170 70 91 213 26 79 55 83 53 170 180 50 156 15 105 15 126 233 173 33 95 186 31 232 6 43 103 217 182 242 204 52 110 99 148 180 145 142 24 53 180 31 188 19 31 78 175 205 220 101 13 225 81 155 55 247 31 107 154 134 69 35 200 63 22 57 47 71 152 204 46 185 25]

// [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,136,243,234,179,129,49,43,143,172,237,105,52,203,46,12,44,181,223,205,216,183,37,3,170,70,91,213,26,79,55,83,53,170,180,50,156,15,105,15,126,233,173,33,95,186,31,232,6,43,103,217,182,242,204,52,110,99,148,180,145,142,24,53,180,31,188,19,31,78,175,205,220,101,13,225,81,155,55,247,31,107,154,134,69,35,200,63,22,57,47,71,152,204,46,185,25]
// 0x000000000000000000000000000000000000000000000000000000000000000188f3eab381312b8faced6934cb2e0c2cb5dfcdd8b72503aa465bd51a4f375335aab4329c0f690f7ee9ad215fba1fe8062b67d9b6f2cc346e6394b4918e1835b41fbc131f4eafcddc650de1519b37f71f6b9a864523c83f16392f4798cc2eb919

// task_response - TaskResponse { reference_task_index: 1, task: Task { block_number: 20, task_created_block: 30, quorum_numbers: Bytes(0x00), quorum_threshold_percentage: 66 }, block_hash: [187, 74, 82, 178, 9, 53, 118, 254, 16, 165, 178, 101, 59, 28, 87, 74, 76, 41, 11, 217, 47, 109, 161, 16, 213, 147, 185, 17, 207, 232, 81, 5], storage_proof_hash: [130, 160, 212, 129, 199, 156, 80, 194, 40, 30, 232, 106, 133, 132, 195, 89, 62, 157, 41, 110, 242, 222, 67, 181, 183, 117, 223, 141, 133, 241, 234, 96], pending_state_hash: [31, 188, 19, 31, 78, 175, 205, 220, 101, 13, 225, 81, 155, 55, 247, 31, 107, 154, 134, 69, 35, 200, 63, 22, 57, 47, 71, 152, 204, 46, 185, 25] }
// avs-finalizer-1  | encoded - 0x000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000a0bb4a52b2093576fe10a5b2653b1c574a4c290bd92f6da110d593b911cfe8510582a0d481c79c50c2281ee86a8584c3593e9d296ef2de43b5b775df8d85f1ea601fbc131f4eafcddc650de1519b37f71f6b9a864523c83f16392f4798cc2eb9190000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001e0000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000004200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000
// avs-finalizer-1  | hash - 0x573824fb994b7d815a2469859b0a0e207690902a80fe4b0e60e73684b9d6f836
// avs-finalizer-1  | hash - 0x573824fb994b7d815a2469859b0a0e207690902a80fe4b0e60e73684b9d6f836
// avs-finalizer-1  | sig - (2289754030684805339693716139192496406593408777700132280153945071929478835120, 4929794602012640729835045982971985917323251587102783256356137092765138415712)
// avs-finalizer-1  | req - SignedTaskResponse { task_response_encoded: Bytes([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 160, 187, 74, 82, 178, 9, 53, 118, 254, 16, 165, 178, 101, 59, 28, 87, 74, 76, 41, 11, 217, 47, 109, 161, 16, 213, 147, 185, 17, 207, 232, 81, 5, 130, 160, 212, 129, 199, 156, 80, 194, 40, 30, 232, 106, 133, 132, 195, 89, 62, 157, 41, 110, 242, 222, 67, 181, 183, 117, 223, 141, 133, 241, 234, 96, 31, 188, 19, 31, 78, 175, 205, 220, 101, 13, 225, 81, 155, 55, 247, 31, 107, 154, 134, 69, 35, 200, 63, 22, 57, 47, 71, 152, 204, 46, 185, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), bls_signature: BlsSignatureWire { g1_point: G1PointWire { x: BigInt([14861803736464583600, 13359267493648125796, 4567276851958915393, 364778862476689231]), y: BigInt([6941806840399917152, 15592160512661960560, 12489562865813337777, 785361590401076478]) } }, operator_id: [3, 139, 117, 0, 102, 188, 93, 172, 98, 223, 122, 183, 119, 74, 4, 34, 103, 43, 107, 106, 106, 231, 198, 246, 102, 1, 58, 205, 165, 122, 138, 174] }
// avs-finalizer-1  | json - "{\"TaskResponseEncoded\":\"0x000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000a0bb4a52b2093576fe10a5b2653b1c574a4c290bd92f6da110d593b911cfe8510582a0d481c79c50c2281ee86a8584c3593e9d296ef2de43b5b775df8d85f1ea601fbc131f4eafcddc650de1519b37f71f6b9a864523c83f16392f4798cc2eb9190000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001e0000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000004200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000\",\"BlsSignature\":{\"g1_point\":{\"X\":\"2289754030684805339693716139192496406593408777700132280153945071929478835120\",\"Y\":\"4929794602012640729835045982971985917323251587102783256356137092765138415712\"}},\"OperatorId\":[3,139,117,0,102,188,93,172,98,223,122,183,119,74,4,34,103,43,107,106,106,231,198,246,102,1,58,205,165,122,138,174]}"
// avs-finalizer-1  | 2024-06-21T12:05:03.240662Z  WARN watch_new_tasks:send_task_response{task_response=TaskResponse { reference_task_index: 1, task: Task { block_number: 20, task_created_block: 30, quorum_numbers: Bytes(0x00), quorum_threshold_percentage: 66 }, block_hash: [187, 74, 82, 178, 9, 53, 118, 254, 16, 165, 178, 101, 59, 28, 87, 74, 76, 41, 11, 217, 47, 109, 161, 16, 213, 147, 185, 17, 207, 232, 81, 5], storage_proof_hash: [130, 160, 212, 129, 199, 156, 80, 194, 40, 30, 232, 106, 133, 132, 195, 89, 62, 157, 41, 110, 242, 222, 67, 181, 183, 117, 223, 141, 133, 241, 234, 96], pending_state_hash: [31, 188, 19, 31, 78, 175, 205, 220, 101, 13, 225, 81, 155, 55, 247, 31, 107, 154, 134, 69, 35, 200, 63, 22, 57, 47, 71, 152, 204, 46, 185, 25] }}: reqwest_retry::middleware: Retry attempt #0. Sleeping 40.915043ms before the next attempt

// 0xe4e3ad7700000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000002217a9f4246bd4c7051b8d310f617809b48505371934c9ef19d8b17c881c1d4d3e00ff96dd3f065291ef3e3d1da90a18830c27e3c2dda5aff2159199b466845211fbc131f4eafcddc650de1519b37f71f6b9a864523c83f16392f4798cc2eb9190000000000000000000000000000000000000000000000000000000000000180000000000000000000000000000000000000000000000000000000000000005500000000000000000000000000000000000000000000000000000000000000ff0000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000004200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000001c00e131e9ddcc17fd125690c47fc489d0d877de4743bfddb30b17f5b5ca779bb8d2c5c4a3f6e56eb8c998d92a2f6da1d50bd4fa2346a3b0b1c4fd3f6ac1879f2c206a812baa743c0e99200b392f9d5ced72cdd1bde1ec81d13e37b4a2d428a06f5247945d1e6c30dc8f82ecb643090ab07425667bb8d34ecb722ab10746e9deaee11a490f5c31b8949cd87caeaf9851290fe556c954545e8e0864be35c3a971aee04b9c155a0f0b743e6af113407fa78d04da74e18e8dbccbdeff1b57bc43b8fa40000000000000000000000000000000000000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000026000000000000000000000000000000000000000000000000000000000000002a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000120cef6be5fb72270d67f3b9f9270d1cd603847b81ef9dfbcc076690e2b1f8036075bd7bfa27bcdd8c18b1e0a9bee2d6c7675c813e60b8c060c2dba67e7707f200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000

// // offset for quorumApks
// // offset for nonSignerPubkeys
// // offset for nonSignerQuorumBitmapIndices

// 0x
// e4e3ad77
// 00000000000000000000000000000000000000000000000000000000000000c0 // offset for task
// 0000000000000000000000000000000000000000000000000000000000000002 // Task response these 4
// 217a9f4246bd4c7051b8d310f617809b48505371934c9ef19d8b17c881c1d4d3
// e00ff96dd3f065291ef3e3d1da90a18830c27e3c2dda5aff2159199b46684521
// 1fbc131f4eafcddc650de1519b37f71f6b9a864523c83f16392f4798cc2eb919
// 0000000000000000000000000000000000000000000000000000000000000180 // offset for NonSignerStakesAndSignature

// 0000000000000000000000000000000000000000000000000000000000000055 // 85 in task
// 00000000000000000000000000000000000000000000000000000000000000ff // 255 in task
// 0000000000000000000000000000000000000000000000000000000000000080 // offset for quorumNumbers in task
// 0000000000000000000000000000000000000000000000000000000000000042 // 66 percentage in task
// 0000000000000000000000000000000000000000000000000000000000000001 // len of quorumNumbers
// 0000000000000000000000000000000000000000000000000000000000000000 // {0} quorumNumbers

// 0000000000000000000000000000000000000000000000000000000000000180 // 12
// 00000000000000000000000000000000000000000000000000000000000001a0 // 13
// 00000000000000000000000000000000000000000000000000000000000001c0 // 14
// 0e131e9ddcc17fd125690c47fc489d0d877de4743bfddb30b17f5b5ca779bb8d // these are g2 and g1s
// 2c5c4a3f6e56eb8c998d92a2f6da1d50bd4fa2346a3b0b1c4fd3f6ac1879f2c2
// 06a812baa743c0e99200b392f9d5ced72cdd1bde1ec81d13e37b4a2d428a06f5
// 247945d1e6c30dc8f82ecb643090ab07425667bb8d34ecb722ab10746e9deaee
// 11a490f5c31b8949cd87caeaf9851290fe556c954545e8e0864be35c3a971aee
// 04b9c155a0f0b743e6af113407fa78d04da74e18e8dbccbdeff1b57bc43b8fa4
// 0000000000000000000000000000000000000000000000000000000000000220
// 0000000000000000000000000000000000000000000000000000000000000260
// 00000000000000000000000000000000000000000000000000000000000002a0

// 0000000000000000000000000000000000000000000000000000000000000000 // len for nonSignerQuorumBitmapIndices
// 0000000000000000000000000000000000000000000000000000000000000000 // len for nonSignerPubkeys
// 0000000000000000000000000000000000000000000000000000000000000001 // len for quorumApks
// 20cef6be5fb72270d67f3b9f9270d1cd603847b81ef9dfbcc076690e2b1f8036 // quorumApks
// 075bd7bfa27bcdd8c18b1e0a9bee2d6c7675c813e60b8c060c2dba67e7707f20 // quorumApks
// 0000000000000000000000000000000000000000000000000000000000000001 // len for quorumApkIndices
// 0000000000000000000000000000000000000000000000000000000000000001 // quorumApkIndices
// 0000000000000000000000000000000000000000000000000000000000000001 // len for totalStakeIndices
// 0000000000000000000000000000000000000000000000000000000000000001 // totalStakeIndices
// 0000000000000000000000000000000000000000000000000000000000000001
// 0000000000000000000000000000000000000000000000000000000000000020
// 0000000000000000000000000000000000000000000000000000000000000000

// [
//     "85",
//     "255",
//     "0x00",
//     "66"
// ]

// [
//     "2",
//     "0x217a9f4246bd4c7051b8d310f617809b48505371934c9ef19d8b17c881c1d4d3",
//     "0xe00ff96dd3f065291ef3e3d1da90a18830c27e3c2dda5aff2159199b46684521",
//     "0x1fbc131f4eafcddc650de1519b37f71f6b9a864523c83f16392f4798cc2eb919"
// ]

// [
//     [],
//     [],
//     [
//         [
//             "14839684612080053723352530652638378462040084795715332194284696096723792003126",
//             "3328462064903592387934458740240637006909354923323761938998751522324629978912"
//         ]
//     ],
//     [
//         [
//             "6366161282746854354989203510350658949647171102879489866722355904590273690509",
//             "20064827706949743923481953002171030372653794098992726282797573699855586030274"
//         ],
//         [
//             "3010836661981714126010473796043479964266861373900488684634306163299557443317",
//             "16497532923264624051342207355863563140565229985361681699203023846350495017710"
//         ]
//     ],
//     [
//         "7980081821747279570400963249146621180216041822519429332927436477802644708078",
//         "2137452446906455377374253730163559394112984509546335563339923380167591563172"
//     ],
//     [
//         "1"
//     ],
//     [
//         "1"
//     ],
//     [
//         []
//     ]
// ]
